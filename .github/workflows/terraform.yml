name: Terraform Workflows

on:
  push:
    branches:
      - main         # Trigger on push to main branch
    tags:
      - "v*.*.*"     # Trigger on semantic version tags (e.g., v1.0.0)
  pull_request:
    branches:
      - main         # Trigger on pull requests targeting main

jobs:
  # Job 1: Validate Terraform Module
  validate:
    name: Validate Terraform Module
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Configure Terraform credentials
      - name: Configure Terraform credentials
        run: |
          mkdir -p ~/.terraform.d
          echo '{"credentials":{"app.terraform.io":{"token":"${TFC_TOKEN}"}}}' > ~/.terraform.d/credentials.tfrc.json
        env:
          TFC_TOKEN: ${{ secrets.TFC_TOKEN }}

      # Step 3: Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.6"

      # Step 4: Terraform Init
      - name: Terraform Init
        working-directory: modules/ec2-instance
        run: terraform init

      # Step 5: Terraform Validate
      - name: Terraform Validate
        working-directory: modules/ec2-instance
        run: terraform validate

  # # Job 2: Apply Infrastructure
  # apply:
  #   name: Apply Infrastructure
  #   runs-on: ubuntu-latest

  #   steps:
  #     # Step 1: Checkout code
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     # Step 2: Configure Terraform credentials
  #     - name: Configure Terraform credentials
  #       run: |
  #         mkdir -p ~/.terraform.d
  #         echo '{"credentials":{"app.terraform.io":{"token":"${TFC_TOKEN}"}}}' > ~/.terraform.d/credentials.tfrc.json
  #       env:
  #         TFC_TOKEN: ${{ secrets.TFC_TOKEN }}

  #     # Step 3: Set up Terraform
  #     - name: Set up Terraform
  #       uses: hashicorp/setup-terraform@v2
  #       with:
  #         terraform_version: "1.5.6"

  #     # Step 4: Terraform Init
  #     - name: Terraform Init
  #       working-directory: examples/simple
  #       env:
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       run: terraform init

  #     # Step 5: Terraform Plan
  #     - name: Terraform Plan
  #       working-directory: examples/simple
  #       env:
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       run: terraform plan

  #     # Step 6: Terraform Apply
  #     - name: Terraform Apply
  #       working-directory: examples/simple
  #       env:
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       run: terraform apply -auto-approve

  # Job 3: Publish Terraform Module
  publish:
    name: Publish Terraform Module
    runs-on: ubuntu-latest

    if: startsWith(github.ref, 'refs/tags/v') # Trigger only for version tags

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Configure Terraform credentials
      - name: Configure Terraform credentials
        run: |
          mkdir -p ~/.terraform.d
          echo '{"credentials":{"app.terraform.io":{"token":"${TFC_TOKEN}"}}}' > ~/.terraform.d/credentials.tfrc.json
        env:
          TFC_TOKEN: ${{ secrets.TFC_TOKEN }}

      # Step 3: Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.6"

      # Step 4: Terraform Init
      - name: Terraform Init
        working-directory: modules/ec2-instance
        run: terraform init

      # Step 5: Terraform Format Check
      - name: Terraform Format Check
        working-directory: modules/ec2-instance
        run: terraform fmt -check

      # Step 6: Terraform Validate
      - name: Terraform Validate
        working-directory: modules/ec2-instance
        run: terraform validate

      # Step 7: Publish to Terraform Cloud
      - name: Publish to Terraform Cloud
        working-directory: modules/ec2-instance
        run: |
          echo "Publishing module to Terraform Cloud"
          terraform plan
